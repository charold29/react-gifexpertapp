{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setinputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","setTimeout","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"iNAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEVC,mBAAS,IAFC,mBAEvCC,EAFuC,KAE3BC,EAF2B,KAmB9C,OAEI,aADA,CACA,QAAMC,SAbW,SAACC,GAClBA,EAAEC,iBAECJ,EAAWK,OAAOC,OAAS,IAC1BR,GAAc,SAAAS,GAAI,OAAIP,GAAJ,mBAAmBO,OACrCN,EAAc,MAQlB,SACI,uBACIO,KAAK,OACLC,MAAQT,EACRU,SArBc,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,a,+BCPlBG,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DAEbC,EAFa,iDAEoCC,UAAWH,GAF/C,wEAGAI,MAAMF,GAHN,cAGbG,EAHa,gBAKIA,EAAKC,OALT,uBAKXC,EALW,EAKXA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAM,CACFC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAXvB,kBAeZM,GAfY,4CAAH,sDCAPO,EAAc,SAAC,GAAoB,IAAlBH,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAEjC,OAEI,sBAAKc,UAAU,6CAAf,UACI,qBAAKC,IAAMf,EAAMgB,IAAMN,IACvB,kCAAMA,EAAN,WCHCO,EAAU,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAAc,ECDX,SAAEA,GAAe,IAAD,EAEdd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAJ2B,mBAEjCC,EAFiC,KAE1BC,EAF0B,KAyBxC,OAlBAC,qBAAW,WAEPxB,EAASC,GACJwB,MAAM,SAAAC,GAEHC,YAAY,WAERJ,EAAS,CACLf,KAAMkB,EACNL,SAAQ,MAGd,WAIX,CAACpB,IAEGqB,EDtBwBM,CAAc3B,GAAjCa,EAFuB,EAE5BN,KAAaa,EAFe,EAEfA,QAEpB,OACI,qCACI,qBAAIJ,UAAU,sCAAd,cAAuDhB,EAAvD,OAECoB,GAAW,mBAAGJ,UAAU,0CAAb,qBAGZ,qBAAKA,UAAU,aAAf,SAEQH,EAAOJ,KAAK,SAAAC,GAAG,OACX,cAAC,EAAD,eAESA,GADCA,EAAIC,aEkBvBiB,EAjCM,WAAK,MAIc1C,mBAAS,CAAC,qBAJxB,mBAIf2C,EAJe,KAIH5C,EAJG,KAWtB,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAEA,6BAEQ4C,EAAWpB,KAAI,SAAAT,GAAQ,OACvB,cAAC,EAAD,CAEIA,SAAaA,GADRA,YClB7B8B,IAASC,OAEL,cAAC,EAAD,IAEFC,SAASC,eAAe,W","file":"static/js/main.d2ed9f26.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ( {setCategories} ) => {\r\n    \r\n    const [inputValue, setinputValue] = useState('');\r\n\r\n    const handleInputChange = (e) => {\r\n        setinputValue(e.target.value)\r\n    }\r\n\r\n    const handleSubmit = (e) =>{\r\n        e.preventDefault();\r\n\r\n        if(inputValue.trim().length > 2) {\r\n            setCategories(cats =>[inputValue ,...cats]);\r\n            setinputValue('');\r\n        }\r\n        // console.log('Submit hecho')\r\n    }\r\n\r\n\r\n    return (\r\n        //el form agrupa lo demas por eso no se pone fragment\r\n        <form onSubmit={ handleSubmit }>\r\n            <input\r\n                type=\"text\"\r\n                value={ inputValue }\r\n                onChange= { handleInputChange}\r\n            />\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n ","//encodeURI = es para convertir espacios en _ para la url\r\nexport const getGifs = async(category) => {\r\n        \r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI( category ) }&limit=10&offset=0&api_key=Y75Ffu86v8FKcAo9VozYVcc22IhXb4HG`;\r\n    const resp = await fetch(url);\r\n    //fetch es para el manejo de peticiones permite acceder y manipular el http\r\n    const { data } = await resp.json();\r\n\r\n    const gifs = data.map( img => {\r\n        return{\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url // para asegurarnos de que son imagenes (?)\r\n        }\r\n    })\r\n\r\n    return gifs;\r\n}","\r\nexport const GifGridItem = ({ title, url }) => {\r\n\r\n    return (\r\n        \r\n        <div className=\"card animate__animated animate__fadeInDown\">\r\n            <img src={ url } alt={ title } />\r\n            <p> { title } </p>\r\n        </div>\r\n    )\r\n}\r\n// funciona\r\n// export const GifGridItem = ({img}) => {\r\n\r\n//     return (\r\n//         // <div> o <li>\r\n//         <li className=\"card\">\r\n//             <p>{img.title}</p>\r\n//             <img src={img.url} alt={img.title} />\r\n//         </li>\r\n//     )\r\n// }\r\n","\r\nimport { useFetchGifs } from \"../hooks/useFetchGifs\";\r\nimport { GifGridItem } from \"./GifGridItem\";\r\n\r\nexport const GifGrid = ({category}) => {\r\n\r\n    const {data:images, loading} = useFetchGifs( category );\r\n\r\n    return (\r\n        <>\r\n            <h3 className=\"animate__animated animate__fadeInUp\"> { category } </h3>\r\n\r\n            {loading && <p className=\"ldtxt animate__animated animate__flash \">Loading</p> } \r\n            {/* solo evalua el true */}\r\n        \r\n            <div className=\"card-grid \">\r\n                {\r\n                    images.map( img => (\r\n                        <GifGridItem  \r\n                            key={ img.id }\r\n                            { ...img }\r\n                        />\r\n                    ))\r\n                    // images.map( ({id,title,url}) => (\r\n                    //         <li key={id}> \r\n                    //             <p>{ title } </p>\r\n                    //             <img src={url}></img>\r\n                    //         </li>\r\n                    // ))\r\n                }\r\n            </div>\r\n            \r\n        </>\r\n    )\r\n}\r\n","import { useEffect, useState } from \"react\"\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n\r\n    const [state, setstate] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect( () => {\r\n\r\n        getGifs( category )\r\n            .then( imgs => {\r\n\r\n                setTimeout( ()=> {\r\n                    \r\n                    setstate({\r\n                        data: imgs,\r\n                        loading:false\r\n                    });\r\n                    \r\n                },1500 );\r\n\r\n            })\r\n\r\n    }, [category])\r\n\r\n    return state; // { data:[], loading:true };\r\n}","import { useState } from \"react\";\r\nimport { AddCategory } from \"./components/AddCategory\";\r\nimport { GifGrid } from \"./components/GifGrid\";\r\n\r\nconst GifExpertApp = () =>{\r\n\r\n    // const categories = ['Death Note', 'Naruto Shippuden', 'Dragon Ball Z'];\r\n\r\n    const [categories, setCategories] = useState(['Naruto Shippuden']);\r\n\r\n    // const handleAdd = () => {\r\n    //     // setCategories([...categories, 'Candy']);\r\n    //     setCategories(cats => [...cats, 'Candy']);\r\n    // }\r\n\r\n    return (\r\n        < >\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCategories={setCategories}/>\r\n            <hr />\r\n\r\n            <ol>\r\n                {\r\n                    categories.map(category=>(\r\n                    <GifGrid \r\n                        key={category}\r\n                        category = { category} \r\n                    />\r\n                    ))\r\n                }\r\n            </ol>\r\n            \r\n        </>\r\n    )\r\n\r\n}\r\n\r\nexport default GifExpertApp;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css'\nimport \"animate.css\"\n\nimport GifExpertApp from './GifExpertApp';\n\nReactDOM.render(\n\n    <GifExpertApp />,\n\n  document.getElementById('root')\n)\n"],"sourceRoot":""}